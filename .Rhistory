ylab = "Test Error", main = "Test Error vs Number of Knots")
par(mfrow = c(1, 1))  # Reset plotting area
# Load necessary libraries
library(splines)
# Step 1: Generate the original data
set.seed(5)  # For reproducibility
n <- 100
x <- runif(n, 0, 1)  # Uniformly distributed x
epsilon <- rnorm(n, mean = 0, sd = 0.1)  # Noise
y <- sin(2 * pi * x^3)^3 + epsilon  # Response variable
# Step 2: Fit cubic spline models and calculate training errors
k_values <- 4:12  # Different numbers of interior knots
training_errors <- numeric(length(k_values))
test_errors <- numeric(length(k_values))
# Generate new test data
x_new <- x
epsilon_new <- rnorm(n, mean = 0, sd = 0.1)
y_new <- sin(2 * pi * x_new^3)^3 + epsilon_new
# Prepare plotting area for training errors and test errors
par(mfrow = c(3, 3))  # 3x3 grid for each model plot
for (i in seq_along(k_values)) {
k <- k_values[i]
# Define evenly spaced interior knots (excluding boundaries)
interior_knots <- seq(0, 1, length.out = k + 2)[-c(1, k + 2)]
# Create the full knot vector with repeated boundaries for cubic splines
knots <- c(rep(0, 4), interior_knots, rep(1, 4))
# Fit cubic spline model with boundary and interior knots
model <- lm(y ~ bs(x, knots = knots, degree = 3, intercept = TRUE))
# Training error
y_hat <- predict(model, newdata = data.frame(x = x))
training_errors[i] <- sum((y - y_hat)^2)
# Test error
y_hat_new <- predict(model, newdata = data.frame(x = x_new))
test_errors[i] <- sum((y_new - y_hat_new)^2)
# Step 4: Plotting y and fitted line for each value of k
plot(x_new, y_new, main = paste("k =", k), col = "blue", pch = 16,
xlab = "x", ylab = "y", ylim = range(c(y, y_hat)),
cex.main = 0.9)
lines(sort(x), y_hat[order(x)], col = "red", lwd = 2)
}
# Reset plotting area to single plot
par(mfrow = c(1, 1))
# Plotting Training and Test Errors
par(mfrow = c(1, 2))  # Set up plotting area for training and test errors
# Plot training error
plot(k_values, training_errors, type = "b", col = "blue", pch = 16, xlab = "Number of Knots (k)",
ylab = "Training Error", main = "Training Error vs Number of Knots")
# Plot test error
plot(k_values, test_errors, type = "b", col = "red", pch = 16, xlab = "Number of Knots (k)",
ylab = "Test Error", main = "Test Error vs Number of Knots")
par(mfrow = c(1, 1))  # Reset plotting area
data <- read.csv("ifood_df.csv")
data <- read.csv("ifood_df.csv")
getwd(
)
data <- read.csv("ifood_df.csv")
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
View(design_lasso)
View(design_lasso)
sparse_matrix <- as(design_lasso, "dgCMatrix")
library(Matrix)
sparse_matrix <- as(design_lasso, "dgCMatrix")
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
View(sparse_matrix)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
library(gamlr)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
View(data)
View(data)
View(data)
View(newdesign)
View(design_lasso)
View(y)
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
View(cor_matrix)
View(cor_matrix)
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
##only remove income
newdesign <- newdesign[, !colnames(newdesign) %in% c( "Income"
)]
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4, family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
beta
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#factor
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
source("naref.R")
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) naref(col) else col
}))
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4, family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
##only remove income
newdesign <- newdesign[, !colnames(newdesign) %in% c( "Income"
)]
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#factor
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
source("naref.R")
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) naref(col) else col
}))
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4, family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#factor
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
source("naref.R")
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) naref(col) else col
}))
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
##only remove income
newdesign <- newdesign[, !colnames(newdesign) %in% c( "Income"
)]
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
beta
predictions_lasso <- predict(lasso, design_lasso, select = "min")
data <- read.csv("ifood_df.csv")
design <- data[, !colnames(data) %in% c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5", "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
dim(design)
design <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
View(data)
data <- read.csv("ifood_df.csv")
design <- data[, !colnames(data) %in% c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5", "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
dim(design)
design <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
#factor
design <- as.data.frame(lapply(design, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
#correlation matrix
cor_matrix <- cor(design[, apply(design, 2, function(x) !all(x %in% c(0, 1)))])
View(design)
which(abs(cor_matrix) > 0.7 & abs(cor_matrix)<1, arr.ind = TRUE)
library(faraway)
logistic <- glm(Response ~ ., data = design, family = binomial)
summary(logistic2)    #detect severe collinearity
summary(logistic)    #detect severe collinearity
vif <- vif(logistic)
library(gamlr)
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#factor
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
source("naref.R")
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) naref(col) else col
}))
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
View(newdesign_forcor)
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
#factor
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
source("naref.R")
newdesign <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) naref(col) else col
}))
#dense matrix
design_lasso <- model.matrix(~. - campaign_total, data = newdesign)[,-1]
sparse_matrix <- as(design_lasso, "dgCMatrix")
y <- as.matrix(newdesign$campaign_total)
#use cv lasso
lasso <- cv.gamlr(sparse_matrix, y, verb=TRUE, lambda.min.ratio=1e-4,family = "poisson")
plot(lasso)
beta <- coef(lasso, select = "min")
o <- order(abs(beta),decreasing = TRUE)
beta <- drop(beta)
beta
beta[o][-1][1:10]
predictions_lasso <- predict(lasso, design_lasso, select = "min")
#correlation matrix
newdesign_forcor <-  newdesign[, !colnames(newdesign) %in% c( "Income"
)]
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
View(newdesign_forcor)
View(newdesign_forcor)
str(newdesign_forcor)
View(data)
View(data)
View(data)
View(data)
cor_matrix <- cor(newdesign_forcor[, apply(newdesign_forcor, 2, function(x) !all(x %in% c(0, 1)))])
# Load necessary libraries
library(ggplot2)
library(readr)
# Load necessary libraries
library(ggplot2)
library(readr)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
# Load the dataset
ifood_df <- read_csv("ifood_df.csv")
# Select only numerical columns for boxplot analysis
numerical_cols <- sapply(ifood_df, is.numeric)
numerical_data <- ifood_df[, numerical_cols]
# Create a boxplot for each numerical variable
pdf("boxplots.pdf") # Save boxplots to a PDF
# Create a boxplot for each numerical variable
for (col_name in colnames(numerical_data)) {
print(
ggplot(numerical_data, aes_string(y = col_name)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", col_name)) +
theme_minimal()
)
}
dev.off()
# Create a boxplot for each numerical variable
pdf("boxplots.pdf") # Save boxplots to a PDF
for (col_name in colnames(numerical_data)) {
print(
ggplot(numerical_data, aes_string(y = col_name)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", col_name)) +
theme_minimal()
)
}
# Load the dataset
ifood_df <- read_csv("path/to/ifood_df.csv")
# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(readr)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
# Load the dataset
ifood_df <- read_csv("path/to/ifood_df.csv")
# Load the dataset
ifood_df <- read_csv("ifood_df.csv")
# Select only numerical columns for boxplot analysis
numerical_cols <- sapply(ifood_df, is.numeric)
numerical_data <- ifood_df[, numerical_cols]
# Create boxplots and organize them into figures with 10 subplots
plot_list <- lapply(names(numerical_data), function(col_name) {
ggplot(numerical_data, aes_string(y = col_name)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", col_name)) +
theme_minimal()
})
# Create boxplots and organize them into figures with 10 subplots
plot_list <- lapply(names(numerical_data), function(col_name) {
ggplot(numerical_data, aes_string(y = col_name)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", col_name)) +
theme_minimal()
})
View(numerical_data)
# Load the dataset
ifood_df <- read_csv("path/to/ifood_df.csv")
# Select only numerical columns for boxplot analysis
numerical_cols <- sapply(ifood_df, is.numeric)
numerical_data <- ifood_df[, numerical_cols]
# Create boxplots
plot_list <- lapply(names(numerical_data), function(col_name) {
ggplot(numerical_data, aes_string(y = col_name)) +
geom_boxplot() +
ggtitle(paste("Boxplot of", col_name)) +
theme_minimal()
})
# Arrange plots in groups of 10 and display them in RStudio
plots_per_page <- 10
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
View(data)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
# Load the dataset
ifood_df <- read_csv("path/to/ifood_df.csv")
# Load the dataset
ifood_df <- read_csv("ifood_df.csv")
View(ifood_df)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
View(ifood_df)
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
View(newdesign)
library(gamlr)
library(Matrix)
setwd("/Users/andrewbelyaev/UIUC/STAT 527/STAT527 Final Project")
data <- read.csv("ifood_df.csv")
newdesign <- data[, !colnames(data) %in% c( "Z_CostContact",
"Z_Revenue","MntTotal","MntRegularProds",
"AcceptedCmpOverall"
)]
newdesign$campaign_total <- rowSums(newdesign[, c("AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response")])
newdesign <- newdesign[, !colnames(newdesign) %in% c( "AcceptedCmp1", "AcceptedCmp2", "AcceptedCmp3",
"AcceptedCmp4","AcceptedCmp5","Response"
)]
View(newdesign)
#factor
newdesign_1 <- as.data.frame(lapply(newdesign, function(col) {
if (length(unique(col)) <= 3) factor(col) else col
}))
View(newdesign_1)
View(newdesign_1)
View(data)
View(data)
View(data)
